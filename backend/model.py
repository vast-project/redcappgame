#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""model from: https://app.asana.com/0/1204079067058910/1204732484189369

Story files are loaded via a STORED/GENERATED column.
SQLAlchemy does not update these automatically.
As a consequence, to apply changes to story script names,
use e.g. (no data loss occurs):

    ALTER TABLE public.user_context DROP story_file;

    ALTER TABLE public.user_context ADD story_file varchar NULL GENERATED ALWAYS AS (
    CASE
        WHEN language::text = 'en'::text THEN 'redcapTaleEnglish.json'::text
        WHEN language::text = 'el'::text THEN 'redcapTaleGreek.json'::text
        WHEN language::text = 'gr'::text THEN 'redcapTaleGreek.json'::text
        WHEN language::text = 'it'::text THEN 'redcapTaleItalian.json'::text
        WHEN language::text = 'bg'::text THEN 'redcapTaleBulgarian.json'::text
        ELSE 'redcapTaleEnglish.json'::text
    END) STORED;
"""

from sqlalchemy import Column, Computed
from sqlalchemy import Integer, String, DateTime
from sqlalchemy.sql import func


from db import Base, Session, engine

# https://stackoverflow.com/a/62219964/1827854
lang2script = """case 
    when language = 'en' then 'redcapTaleEnglish.json'
    when language = 'el' then 'redcapTaleGreek.json'
    when language = 'gr' then 'redcapTaleGreek.json'
    when language = 'it' then 'redcapTaleItalian.json'
    when language = 'bg' then 'redcapTaleBulgarian.json'
    else 'redcapTaleEnglish.json'
end"""


class UserContext(Base):
    """the model user_context represents the context in which the user is framed and it is mostly derived by the web form"""

    __tablename__ = "user_context"

    # the unique serial id of the record (postgres-generated)
    u_id = Column(Integer, primary_key=True)
    # the timestamp of the request (postgres-generated with current_timestamp)
    r_timestamp = Column(DateTime, server_default=func.now())

    # supported values: en, gr. Set by hidden field in the form
    language = Column(String, default="en")
    # show ranges of values in the form, for instance: 5-6; 6-10; 11-15; 15-20; 21-30; >30
    age = Column(String)
    # show list of values in the form, for instance: Male/Female
    gender = Column(String)
    # show list of values in the form, for instance: pre-elementary school; elementary school; secondary school; high school; university
    edu_level = Column(String)
    # show list of values in the form (use some predefined widget)
    nationality = Column(String)
    # show list of values in the form, for instance: "redcap@FTM for VAST"; "online anonymous participant"
    activity = Column(String, default="RedCapp")
    # show list of values in the form, for instance: "FTM museum in Nicosia, Cyprus"; "online anonymous participant"
    host_organization = Column(String, default="online anonymous participant")
    # free field, suggest to insert the name of the user school as a placeholder in the field
    user_organization = Column(String, default="none")
    # ref_to_group (generated by activities_backend/NCSR)
    user_group_id = Column(String, nullable=False)
    # group visitors can indicate that their profile values are aggregared
    is_group = Column(String, default="False")
    # (generated by backend)
    session_id = Column(String, index=True, server_default=func.uuid_generate_v4())
    # https://docs.sqlalchemy.org/en/13/core/defaults.html#computed-generated-always-as-columns
    story_file = Column(String, Computed(lang2script))

    def __str__(self):
        return str({c.name: getattr(self, c.name) for c in self.__table__.columns})


class UserAnswer(Base):
    """the model user_answers represents the choices provided by the user during the app experience"""

    __tablename__ = "user_answers"

    # the unique serial id of the record (postgres-generated)
    r_id = Column(Integer, primary_key=True)
    # the timestamp of the answer insertion (postgres-generated with current_timestamp)
    r_timestamp = Column(DateTime, server_default=func.now())

    # the reference to the hash code in the user_context
    r_code = Column(String, index=True)
    # the id of the slide in the story (integer is better?)
    frame_id = Column(String)
    #  (1:1 with QR code)
    story_id = Column(String)
    # (provided by front-end)
    session_id = Column(String, nullable=False)
    question_text = Column(String)
    response_text = Column(String)
    response_id = Column(String)
    # in original language, because shown in final screen
    response_value = Column(String)
    #  "question" and "choice"
    response_type = Column(String)

    def __str__(self):
        return str({c.name: getattr(self, c.name) for c in self.__table__.columns})


class UserEvaluation(Base):
    """the model that stores the result to of the 5-star performance rating"""

    __tablename__ = "user_evaluation"

    # the unique serial id of the record (postgres-generated)
    e_id = Column(Integer, primary_key=True)
    # the timestamp of the answer insertion (postgres-generated with current_timestamp)
    e_timestamp = Column(DateTime, server_default=func.now())
    # (generated by backend)
    session_id = Column(String, index=True)
    # evaluation value
    score = Column(String, nullable=False)

    def __str__(self):
        return str({c.name: getattr(self, c.name) for c in self.__table__.columns})


def init():
    # print("Creating database at: %s" % DATABASE_URL)
    Base.metadata.create_all(engine)

    s = Session()
    s.commit()


def preview():
    from eralchemy2 import render_er

    render_er(Base, "../redcap-ftm.png")


if __name__ == "__main__":
    init()
    # try:
    preview()
    # except:
    #    pass
